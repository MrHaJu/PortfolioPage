import "./chunk-PZ5AY32C.js";

// node_modules/.pnpm/bricks.js@1.8.0/node_modules/bricks.js/dist/bricks.module.js
var _extends = Object.assign || function(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];
    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
  return target;
};
var knot = function knot2() {
  var extended = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var events = /* @__PURE__ */ Object.create(null);
  function on(name, handler) {
    events[name] = events[name] || [];
    events[name].push(handler);
    return this;
  }
  function once(name, handler) {
    handler._once = true;
    on(name, handler);
    return this;
  }
  function off(name) {
    var handler = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;
    handler ? events[name].splice(events[name].indexOf(handler), 1) : delete events[name];
    return this;
  }
  function emit(name) {
    var _this = this;
    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    var cache = events[name] && events[name].slice();
    cache && cache.forEach(function(handler) {
      handler._once && off(name, handler);
      handler.apply(_this, args);
    });
    return this;
  }
  return _extends({}, extended, {
    on,
    once,
    off,
    emit
  });
};
var bricks = function bricks2() {
  var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
  var persist = void 0;
  var ticking = void 0;
  var sizeIndex = void 0;
  var sizeDetail = void 0;
  var columnTarget = void 0;
  var columnHeights = void 0;
  var nodeTop = void 0;
  var nodeLeft = void 0;
  var nodeWidth = void 0;
  var nodeHeight = void 0;
  var nodes = void 0;
  var nodesWidths = void 0;
  var nodesHeights = void 0;
  var packed = options.packed.indexOf("data-") === 0 ? options.packed : "data-" + options.packed;
  var sizes = options.sizes.slice().reverse();
  var position = options.position !== false;
  var container = options.container.nodeType ? options.container : document.querySelector(options.container);
  var selectors = {
    all: function all() {
      return toArray(container.children);
    },
    new: function _new() {
      return toArray(container.children).filter(function(node) {
        return !node.hasAttribute("" + packed);
      });
    }
  };
  var setup = [setSizeIndex, setSizeDetail, setColumns];
  var run = [setNodes, setNodesDimensions, setNodesStyles, setContainerStyles];
  var instance = knot({
    pack,
    update,
    resize
  });
  return instance;
  function runSeries(functions) {
    functions.forEach(function(func) {
      return func();
    });
  }
  function toArray(input) {
    var scope = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : document;
    return Array.prototype.slice.call(input);
  }
  function fillArray(length) {
    return Array.apply(null, Array(length)).map(function() {
      return 0;
    });
  }
  function getSizeIndex() {
    return sizes.map(function(size) {
      return size.mq && window.matchMedia("(min-width: " + size.mq + ")").matches;
    }).indexOf(true);
  }
  function setSizeIndex() {
    sizeIndex = getSizeIndex();
  }
  function setSizeDetail() {
    sizeDetail = sizeIndex === -1 ? sizes[sizes.length - 1] : sizes[sizeIndex];
  }
  function setColumns() {
    columnHeights = fillArray(sizeDetail.columns);
  }
  function setNodes() {
    nodes = selectors[persist ? "new" : "all"]();
  }
  function setNodesDimensions() {
    if (nodes.length === 0) {
      return;
    }
    nodesWidths = nodes.map(function(element) {
      return element.clientWidth;
    });
    nodesHeights = nodes.map(function(element) {
      return element.clientHeight;
    });
  }
  function setNodesStyles() {
    nodes.forEach(function(element, index) {
      columnTarget = columnHeights.indexOf(Math.min.apply(Math, columnHeights));
      element.style.position = "absolute";
      nodeTop = columnHeights[columnTarget] + "px";
      nodeLeft = columnTarget * nodesWidths[index] + columnTarget * sizeDetail.gutter + "px";
      if (position) {
        element.style.top = nodeTop;
        element.style.left = nodeLeft;
      } else {
        element.style.transform = "translate3d(" + nodeLeft + ", " + nodeTop + ", 0)";
      }
      element.setAttribute(packed, "");
      nodeWidth = nodesWidths[index];
      nodeHeight = nodesHeights[index];
      if (nodeWidth && nodeHeight) {
        columnHeights[columnTarget] += nodeHeight + sizeDetail.gutter;
      }
    });
  }
  function setContainerStyles() {
    container.style.position = "relative";
    container.style.width = sizeDetail.columns * nodeWidth + (sizeDetail.columns - 1) * sizeDetail.gutter + "px";
    container.style.height = Math.max.apply(Math, columnHeights) - sizeDetail.gutter + "px";
  }
  function resizeFrame() {
    if (!ticking) {
      window.requestAnimationFrame(resizeHandler);
      ticking = true;
    }
  }
  function resizeHandler() {
    if (sizeIndex !== getSizeIndex()) {
      pack();
      instance.emit("resize", sizeDetail);
    }
    ticking = false;
  }
  function pack() {
    persist = false;
    runSeries(setup.concat(run));
    return instance.emit("pack");
  }
  function update() {
    persist = true;
    runSeries(run);
    return instance.emit("update");
  }
  function resize() {
    var flag = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
    var action = flag ? "addEventListener" : "removeEventListener";
    window[action]("resize", resizeFrame);
    return instance;
  }
};
var bricks_module_default = bricks;
export {
  bricks_module_default as default
};
//# sourceMappingURL=bricks__js.js.map
